// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String  @id @unique @default(uuid())
  name        String  @db.VarChar(255)
  email       String  @unique
  isActive    Boolean @default(true)
  password    String?
  position    String  @db.VarChar(255)

  created_at DateTime @default(now()) @db.Timestamp
  updated_at DateTime @updatedAt @db.Timestamp

  LogSystem       LogSystem[]
  NewUser         NewUser?
  Enter           Enter[] 
  Exit            Exit[]
  Transform       Transform[]

  @@map("users")
}

model LogSystem {
  id        String @id @unique @default(uuid())

  User   User?   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id String?

  type     String
  action    String
  
  before    Json?
  after     Json?
  created_at DateTime @default(now()) @db.Timestamp

  @@map("log_systems")
}

model NewUser {
  id    String @id @unique @default(uuid())
  token String @unique

  user_id String? @unique
  User   User?   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("new_user")
}

model Producer {
  id          String  @id @unique @default(uuid())
  name        String  @db.VarChar(255)
  email       String  @unique
  isActive    Boolean @default(true)
  address     String  @db.VarChar(255)
  phone       String
  cad_pro     String?  @db.VarChar(255)
  ggn         String?  @db.VarChar(255)

  created_at DateTime @default(now()) @db.Timestamp
  updated_at DateTime @updatedAt @db.Timestamp

  Enter   Enter[]

  @@map("producers")
}

model Customer {
  id          String  @id @unique @default(uuid())
  name        String  @db.VarChar(255)
  email       String  @unique
  isActive    Boolean @default(true)
  address     String  @db.VarChar(255)
  phone       String
  type        Int     @default(1)
  cpf_cnpj    String  @db.VarChar(255)

  created_at DateTime @default(now()) @db.Timestamp
  updated_at DateTime @updatedAt @db.Timestamp

  @@map("customers")
}

model Product {
  id          String  @id @unique @default(uuid())
  name        String  @db.VarChar(255)
  isActive    Boolean @default(true)

  created_at DateTime @default(now()) @db.Timestamp
  updated_at DateTime @updatedAt @db.Timestamp

  ProductType       ProductType[]
  ProductSize       ProductSize[]

  @@map("products")
}

model ProductType {
  id          String  @id @unique @default(uuid())
  name        String  @db.VarChar(255)
  isActive    Boolean @default(true)

  product_id String?
  Product   Product?   @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("product_types")
}

model ProductSize {
  id          String  @id @unique @default(uuid())
  name        String  @db.VarChar(255)
  isActive    Boolean @default(true)

  product_id String?
  Product   Product?   @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("product_sizes")
}

model Location {
  id          String  @id @unique @default(uuid())
  name        String  @db.VarChar(255)
  isActive    Boolean @default(true)
  description String? @db.VarChar(255)

  sector_id String?
  Sector   Sector?   @relation(fields: [sector_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  created_at DateTime @default(now()) @db.Timestamp
  updated_at DateTime @updatedAt @db.Timestamp

  @@map("locations")
}

model Sector {
  id          String  @id @unique @default(uuid())
  name        String  @db.VarChar(255) @unique
  isActive      Boolean @default(true)

  Location       Location[]
  created_at DateTime @default(now()) @db.Timestamp
  updated_at DateTime @updatedAt @db.Timestamp

  @@map("sectors")
}

model Material {
  id            String  @id @unique @default(uuid())
  name          String  @db.VarChar(255)
  isActive      Boolean @default(true)
  volume        Int @db.Integer() @default(0)
  volume_type   String
  in_stock      Int  @db.Integer() @default(0)
  traceable     Boolean @default(false)
  description   String? @db.Text()

  created_at DateTime @default(now()) @db.Timestamp
  updated_at DateTime @updatedAt @db.Timestamp

  @@map("materials")
}

model Content {
  id         Int  @id @unique @default(autoincrement())

  created_at DateTime @default(now()) @db.Timestamp
  updated_at DateTime @updatedAt @db.Timestamp

  @@map("contents")
}

model Register {
  id         Int  @id @unique @default(autoincrement())
  type       String

  created_at DateTime @default(now()) @db.Timestamp
  updated_at DateTime @updatedAt @db.Timestamp

  Enter  Enter?
  Exit  Exit?
  Transform Transform?

  @@map("registers")
}

model Enter {
  id            String  @id @unique @default(uuid())

  register_id Int @unique
  Register   Register   @relation(fields: [register_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  user_id String @unique
  User   User   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  producer_id String @unique
  Producer   Producer   @relation(fields: [producer_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  field String
  batch String
  enter_at DateTime @default(now()) @db.Timestamp

  observation   String? @db.Text()

  created_at DateTime @default(now()) @db.Timestamp
  updated_at DateTime @updatedAt @db.Timestamp

  @@map("enters")
}

model Exit {
  id            String  @id @unique @default(uuid())

  register_id Int @unique
  Register   Register   @relation(fields: [register_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  user_id String @unique
  User   User   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  exit_at DateTime @default(now()) @db.Timestamp
  observation   String? @db.Text()

  created_at DateTime @default(now()) @db.Timestamp
  updated_at DateTime @updatedAt @db.Timestamp

  @@map("exits")
}

model Transform {
  id            String  @id @unique @default(uuid())

  register_id Int @unique
  Register   Register   @relation(fields: [register_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  user_id String @unique
  User   User   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  trasnform_at DateTime @default(now()) @db.Timestamp
  observation   String? @db.Text()

  created_at DateTime @default(now()) @db.Timestamp
  updated_at DateTime @updatedAt @db.Timestamp

  @@map("transforms")
}


